/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VerifySignature,
  VerifySignatureInterface,
} from "../VerifySignature";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_messageHash",
        type: "bytes32",
      },
    ],
    name: "getEthSignedMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_hotWalletAddress",
        type: "address",
      },
    ],
    name: "getMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_ethSignedMessageHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_sig",
        type: "bytes",
      },
    ],
    name: "recover",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_hotWalletAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_sig",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610858806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806319045a25146100515780631f5ac1b21461008157806342920a46146100b1578063fa540801146100e1575b600080fd5b61006b60048036038101906100669190610436565b610111565b60405161007891906104d3565b60405180910390f35b61009b6004803603810190610096919061051a565b610180565b6040516100a89190610556565b60405180910390f35b6100cb60048036038101906100c69190610571565b6101b0565b6040516100d891906105fb565b60405180910390f35b6100fb60048036038101906100f69190610616565b61020e565b6040516101089190610556565b60405180910390f35b6000806000806101208561023e565b92509250925060018682858560405160008152602001604052604051610149949392919061065f565b6020604051602081039080840390855afa15801561016b573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60008160405160200161019391906106ec565b604051602081830303815290604052805190602001209050919050565b6000806101bc84610180565b905060006101c98261020e565b90508573ffffffffffffffffffffffffffffffffffffffff166101ec8286610111565b73ffffffffffffffffffffffffffffffffffffffff1614925050509392505050565b600081604051602001610221919061077f565b604051602081830303815290604052805190602001209050919050565b60008060006041845114610287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027e90610802565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6102cd816102ba565b81146102d857600080fd5b50565b6000813590506102ea816102c4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610343826102fa565b810181811067ffffffffffffffff821117156103625761036161030b565b5b80604052505050565b60006103756102a6565b9050610381828261033a565b919050565b600067ffffffffffffffff8211156103a1576103a061030b565b5b6103aa826102fa565b9050602081019050919050565b82818337600083830152505050565b60006103d96103d484610386565b61036b565b9050828152602081018484840111156103f5576103f46102f5565b5b6104008482856103b7565b509392505050565b600082601f83011261041d5761041c6102f0565b5b813561042d8482602086016103c6565b91505092915050565b6000806040838503121561044d5761044c6102b0565b5b600061045b858286016102db565b925050602083013567ffffffffffffffff81111561047c5761047b6102b5565b5b61048885828601610408565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104bd82610492565b9050919050565b6104cd816104b2565b82525050565b60006020820190506104e860008301846104c4565b92915050565b6104f7816104b2565b811461050257600080fd5b50565b600081359050610514816104ee565b92915050565b6000602082840312156105305761052f6102b0565b5b600061053e84828501610505565b91505092915050565b610550816102ba565b82525050565b600060208201905061056b6000830184610547565b92915050565b60008060006060848603121561058a576105896102b0565b5b600061059886828701610505565b93505060206105a986828701610505565b925050604084013567ffffffffffffffff8111156105ca576105c96102b5565b5b6105d686828701610408565b9150509250925092565b60008115159050919050565b6105f5816105e0565b82525050565b600060208201905061061060008301846105ec565b92915050565b60006020828403121561062c5761062b6102b0565b5b600061063a848285016102db565b91505092915050565b600060ff82169050919050565b61065981610643565b82525050565b60006080820190506106746000830187610547565b6106816020830186610650565b61068e6040830185610547565b61069b6060830184610547565b95945050505050565b60008160601b9050919050565b60006106bc826106a4565b9050919050565b60006106ce826106b1565b9050919050565b6106e66106e1826104b2565b6106c3565b82525050565b60006106f882846106d5565b60148201915081905092915050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000610748601c83610707565b915061075382610712565b601c82019050919050565b6000819050919050565b610779610774826102ba565b61075e565b82525050565b600061078a8261073b565b91506107968284610768565b60208201915081905092915050565b600082825260208201905092915050565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b60006107ec6018836107a5565b91506107f7826107b6565b602082019050919050565b6000602082019050818103600083015261081b816107df565b905091905056fea2646970667358221220ae4ec85007588a1a8c144b1b1f4c097ebdec639c34337acdc44ccb4cf0dde49764736f6c634300080a0033";

type VerifySignatureConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifySignatureConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerifySignature__factory extends ContractFactory {
  constructor(...args: VerifySignatureConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "VerifySignature";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VerifySignature> {
    return super.deploy(overrides || {}) as Promise<VerifySignature>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VerifySignature {
    return super.attach(address) as VerifySignature;
  }
  connect(signer: Signer): VerifySignature__factory {
    return super.connect(signer) as VerifySignature__factory;
  }
  static readonly contractName: "VerifySignature";
  public readonly contractName: "VerifySignature";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifySignatureInterface {
    return new utils.Interface(_abi) as VerifySignatureInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerifySignature {
    return new Contract(address, _abi, signerOrProvider) as VerifySignature;
  }
}
